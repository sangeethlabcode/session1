"""
Created on Wed Sep 11 11:02:33 2024

@author: acsan
"""

import numpy as np
import matplotlib.pyplot as plt

# Parameters
M = 50  # Lattice size (M x M)
steps = 1000  # Number of steps for the random walk
trials = 500  # Number of trials to average over

def random_walk(steps, M):
    # Starting position at the center of the lattice
    x, y = M//2, M//2
    
    # Record the displacement and squared displacement
    displacement = np.zeros(steps)
    squared_displacement = np.zeros(steps)
    
    for step in range(steps):
        # Choose a random direction: up, down, left, right
        direction = np.random.choice(['up', 'down', 'left', 'right'])
        if direction == 'up':
            x -= 1
        elif direction == 'down':
            x += 1
        elif direction == 'left':
            y -= 1
        elif direction == 'right':
            y += 1
        
        # Ensure the walker stays within the lattice boundaries
        x = np.clip(x, 0, M-1)
        y = np.clip(y, 0, M-1)
        
        # Calculate displacement and squared displacement from the origin
        displacement[step] = np.sqrt(x**2 + y**2)
        squared_displacement[step] = x**2 + y**2
    
    return displacement, squared_displacement

# Perform multiple trials and average the squared displacement for mean-square displacement
mean_squared_displacement = np.zeros(steps)

for _ in range(trials):
    _, squared_displacement = random_walk(steps, M)
    mean_squared_displacement += squared_displacement

mean_squared_displacement /= trials

# Get the displacement for a single random walk trial
displacement, _ = random_walk(steps, M)

# Plotting the displacement and mean-square displacement
plt.figure(figsize=(12, 8))

# Plot mean-square displacement
plt.subplot(2, 1, 1)
plt.plot(np.arange(steps), mean_squared_displacement, label='Mean-Square Displacement')
plt.xlabel('Number of Steps')
plt.ylabel('Mean-Square Displacement')
plt.title('Mean-Square Displacement vs Number of Steps')
plt.grid(True)
plt.legend()

# Plot displacement for one trial
plt.subplot(2, 1, 2)
plt.plot(np.arange(steps), displacement, label='Displacement (Single Trial)', color='orange')
plt.xlabel('Number of Steps')
plt.ylabel('Displacement')
plt.title('Displacement vs Number of Steps (Single Random Walk)')
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()
